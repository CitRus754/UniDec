----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 12.07.2023 16:20:05
-- Design Name: 
-- Module Name: Mixer_1 - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;

entity Mixer_1 is											-- TDM
	port(
		Clk 		: in std_logic;							-- 88 MHz
		
		Input_I		: in std_logic_vector(15 downto 0);		-- a	Fs = 44 MHz
		Input_Q		: in std_logic_vector(15 downto 0);		-- b
		
		DDS_TVALID	: in std_logic;
		DDS_I		: in std_logic_vector(11 downto 0);		-- c	Fs = 88 MHz
		DDS_Q		: in std_logic_vector(11 downto 0);		-- d
		
		Mix_TVALID	: out std_logic;
		Output_I	: out std_logic_vector(15 downto 0);	-- R	Fs = 44 MHz
		Output_Q	: out std_logic_vector(15 downto 0)		-- I
	);
end Mixer_1;

architecture Behavioral of Mixer_1 is

	-- TVALID delay
	signal tv_w1, tv_w2, tv_w3, tv_w4	: std_logic := '0';

	-- For conventional complex multiplication

--	signal P1, P2, P3, P4 	: std_logic_vector(31 downto 0);
--	signal Sum01, Sum02		: std_logic_vector(31 downto 0);
	
	
	
	-- For fast complex multiplication
	
	signal Input_I_w1			: std_logic_vector(15 downto 0) := (others => '0');
	signal DDS_I_w1, DDS_Q_w1	: std_logic_vector(11 downto 0) := (others => '0');	
	
	signal Sum1            		: std_logic_vector(12 downto 0) := (others => '0');
	signal Sum2, Sum3		    : std_logic_vector(16 downto 0) := (others => '0');
	signal Prod1, Prod2, Prod3 	: std_logic_vector(28 downto 0) := (others => '0');
	signal Sum4, Sum5			: std_logic_vector(29 downto 0) := (others => '0');
	signal Sum4_w1, Sum5_w1     : std_logic_vector(15 downto 0) := (others => '0');	
	signal ToOutI, ToOutQ		: std_logic_vector(15 downto 0) := (others => '0');

begin

	-- TVALID delay
	process(Clk) begin
		if rising_edge(Clk) then
			tv_w1 <= DDS_TVALID;
		end if;
	end process;
	
	process(Clk) begin
		if rising_edge(Clk) then
			tv_w2 <= tv_w1;
		end if;
	end process;
	
	process(Clk) begin
		if rising_edge(Clk) then
			tv_w3 <= tv_w2;
		end if;
	end process;
	
	process(Clk) begin
		if rising_edge(Clk) then
			tv_w4 <= tv_w3;
		end if;
	end process;
	
	Mix_TVALID <= tv_w4;

	-- Conventional complex multiplication
	-- P1 = a * c
	-- P2 = b * d
	-- P3 = b * c
	-- P4 = a * d
	-- R  = P1 - P2
	-- I  = P3 + P4
	
--	process(Clk)
--	begin
--		if rising_edge(Clk) then
--			P1 <= signed(Input_I) * signed(DDS_I);
--			P2 <= signed(Input_Q) * signed(DDS_Q);
--			P3 <= signed(Input_Q) * signed(DDS_I);
--			P4 <= signed(Input_I) * signed(DDS_Q);
--		end if;		
--	end process;
	
--	process(Clk)
--	begin
--		if rising_edge(Clk) then
--			Sum01 <= signed(P1) - signed(P2);
--			Sum02 <= signed(P3) + signed(P4);
--		end if;		
--	end process;
	
--	Output_I <= Sum01(15 downto 0);
--	Output_Q <= Sum02(15 downto 0);


	
	-- Resource optimization complex multiplication
	-- P1 = a * (c + d)
	-- P2 = d * (a + b)
	-- P3 = c * (b - a)
	-- R  = P1 - P2
	-- I  = P1 + P3
		
	stage_1: process(Clk)
	begin
		if rising_edge(Clk) then
			Input_I_w1 	<= Input_I;
			DDS_I_w1	<= DDS_I;
			DDS_Q_w1	<= DDS_Q;
			
			Sum1 <= signed(DDS_I(11) & DDS_I) 		+ signed(DDS_Q(11) & DDS_Q);
			Sum2 <= signed(Input_I(15) & Input_I) 	+ signed(Input_Q(15) & Input_Q);
			Sum3 <= signed(Input_Q(15) & Input_Q) 	- signed(Input_I(15) & Input_I);
		end if;		
	end process;

	stage_2: process(Clk)
	begin
		if rising_edge(Clk) then
			Prod1 <= signed(Input_I_w1) * signed(Sum1);
			Prod2 <= signed(DDS_Q_w1)   * signed(Sum2);
			Prod3 <= signed(DDS_I_w1)   * signed(Sum3);
		end if;		
	end process;

	stage_3: process(Clk)
	begin
		if rising_edge(Clk) then
			Sum4 <= signed(Prod1(28) & Prod1) - signed(Prod2(28) & Prod2);
			Sum5 <= signed(Prod1(28) & Prod1) + signed(Prod3(28) & Prod3);
		end if;		
	end process;
	
	Sum4_w1 <= Sum4(29) & Sum4(25 downto 11);
	Sum5_w1 <= Sum5(29) & Sum5(25 downto 11);
	
	rounding: process(Clk)
	begin
		if rising_edge(Clk) then
            if Sum4(10) = '1' then
                ToOutI <= signed(Sum4_w1) + 1;
            else
                ToOutI <= Sum4_w1;
            end if;
            if Sum5(10) = '1' then
                ToOutQ <= signed(Sum5_w1) + 1;
            else
                ToOutQ <= Sum5_w1;
            end if;
		end if;		
	end process;
	
	Output_I <= ToOutI;
	Output_Q <= ToOutQ;
	
end Behavioral;
